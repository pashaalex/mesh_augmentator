name: Build Library

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*' 

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup build environment (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libomp-dev

    - name: Setup build environment (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install make
        choco install mingw

    - name: Find and copy necessary DLLs (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        $mingwPath = (Get-Command g++).Path.Replace('\bin\g++.exe', '')
        cp "$mingwPath\bin\libgomp-1.dll" .
        cp "$mingwPath\bin\libgcc_s_seh-1.dll" .
        cp "$mingwPath\bin\libwinpthread-1.dll" .

    - name: Build library
      run: |
        cd cpp
        make

    - name: Archive library
      uses: actions/upload-artifact@v2
      with:
        name: mesh_render-library-${{ matrix.os }}
        path: |
          cpp/mesh_render.dll
          cpp/mesh_render.so
          cpp/*.o
          mesh_augmentator.py
          libgomp-1.dll
          libgcc_s_seh-1.dll
          libwinpthread-1.dll
        if-no-files-found: ignore

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: mesh_render-library-ubuntu-latest
        path: ./linux
    - name: Download artifacts (Windows)
      uses: actions/download-artifact@v2
      with:
        name: mesh_render-library-windows-latest
        path: ./windows

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset (Linux)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./linux
        asset_name: mesh_render-linux.zip
        asset_content_type: application/zip

    - name: Upload Release Asset (Windows)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./windows
        asset_name: mesh_render-windows.zip
        asset_content_type: application/zip
